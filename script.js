// script.js

document.addEventListener('DOMContentLoaded', () => {
    // Dropdown functionality for navigation
    const dropdownToggle = document.querySelector('.dropdown-toggle');
    if (dropdownToggle) {
        dropdownToggle.addEventListener('click', (e) => {
            e.preventDefault(); // Prevent default link behavior
            const dropdownMenu = dropdownToggle.nextElementSibling;
            if (dropdownMenu && dropdownMenu.classList.contains('dropdown')) {
                dropdownMenu.style.display = dropdownMenu.style.display === 'block' ? 'none' : 'block';
            }
        });
        // Close dropdown if clicked outside
        document.addEventListener('click', (e) => {
            if (!dropdownToggle.contains(e.target) && !e.target.closest('.dropdown')) {
                const dropdownMenu = dropdownToggle.nextElementSibling;
                if (dropdownMenu) {
                    dropdownMenu.style.display = 'none';
                }
            }
        });
    }

    // Quiz Data
    const questions = [
        // ุงููุฌููุนุฉ ุงูุฃููู (50 ุณุคุงู)
        {
            question: "ุฃู ูู ุฎูุงุฑุงุช ุงูุจูุงูุงุช ุงูุชุงููุฉ ูู Visual Basic ููุณุชุฎุฏู ูุชุฎุฒูู ุนุจุงุฑุฉ ูุตูุฉ ุทูููุฉุ",
            options: ["Integer", "Double", "String", "Date"],
            answer: "String",
            explanation: "ููุน ุงูุจูุงูุงุช String ููุณุชุฎุฏู ูุชุฎุฒูู ุงููุตูุตุ ุจูุง ูู ุฐูู ุงูุนุจุงุฑุงุช ุงูุทูููุฉุ ุจูููุง ุงูุฃููุงุน ุงูุฃุฎุฑู ุชุณุชุฎุฏู ูุฃุบุฑุงุถ ูุฎุชููุฉ ูุซู ุงูุฃุนุฏุงุฏ ูุงูุชูุงุฑูุฎ."
        },
        {
            question: "ุนูุฏ ุงุณุชุฎุฏุงู ุงููุชุบูุฑุงุช ูู ุงูุจุฑูุฌุฉุ ูุงุฐุง ูุญุฏุซ ุนูุฏ ุชุนููู ูููุฉ ุฌุฏูุฏุฉ ููุชุบูุฑ ููุฌูุฏุ",
            options: ["ูููุฉ ุงููุชุบูุฑ ุชูุญุฐู", "ุชูุญูุธ ุงููููุฉ ุงูุฌุฏูุฏุฉ ููุท", "ุชูุณุชุจุฏู ุงููููุฉ ุงููุฏููุฉ ุจุงููููุฉ ุงูุฌุฏูุฏุฉ", "ููุบูู ุงูุจุฑูุงูุฌ"],
            answer: "ุชูุณุชุจุฏู ุงููููุฉ ุงููุฏููุฉ ุจุงููููุฉ ุงูุฌุฏูุฏุฉ",
            explanation: "ุนูุฏ ุชุนููู ูููุฉ ุฌุฏูุฏุฉ ููุชุบูุฑุ ุงููููุฉ ุงููุฏููุฉ ุชุณุชุจุฏู ุจุงููููุฉ ุงูุฌุฏูุฏุฉุ ููุง ูุชูุญ ุชุญุฏูุซ ุงูุจูุงูุงุช ุงููุฎุฒูุฉ ูู ุงูุฐุงูุฑุฉ."
        },
        {
            question: "ุฅุฐุง ูุงู ูุฏูู ุฌููุฉ ุดุฑุทูุฉ ูุซู If X < 10 Thenุ ูุง ูู ุงููุชูุฌุฉ ุฅุฐุง ูุงูุช ูููุฉ X ุชุณุงูู 10ุ",
            options: ["ูุชู ุชูููุฐ ุงูููุฏ ุฏุงุฎู ุงูุฌููุฉ ุงูุดุฑุทูุฉ", "ูุง ูุชู ุชูููุฐ ุงูููุฏ ุฏุงุฎู ุงูุฌููุฉ ุงูุดุฑุทูุฉ", "ุงูุจุฑูุงูุฌ ูุชููู", "ูุชู ุทุจุงุนุฉ ุฑุณุงูุฉ ุฎุทุฃ"],
            answer: "ูุง ูุชู ุชูููุฐ ุงูููุฏ ุฏุงุฎู ุงูุฌููุฉ ุงูุดุฑุทูุฉ",
            explanation: "ุงูุฌููุฉ ุงูุดุฑุทูุฉ If ุชูููุฐ ููุท ุฅุฐุง ูุงู ุงูุดุฑุท Trueุ ูุนูุฏูุง ุชููู X ุชุณุงูู 10 ูุฅู ุงูุดุฑุท X < 10 ูููู Falseุ ูุฐุง ูุง ูุชู ุชูููุฐ ุงูููุฏ."
        },
        {
            question: "ูุง ูู ุงููุดุบูุงุช ุงูุชู ุชูุณุชุฎุฏู ูุชูููู ุงูุนูุงูุงุช ุจูู ุงููููุ",
            options: ["ุงููุดุบูุงุช ุงูุญุณุงุจูุฉ", "ุงููุดุบูุงุช ุงููุตูุฉ", "ูุดุบูุงุช ุงูุชุนููู", "ูุดุบูุงุช ุงูููุงุฑูุฉ"],
            answer: "ูุดุบูุงุช ุงูููุงุฑูุฉ",
            explanation: "ูุดุบูุงุช ุงูููุงุฑูุฉ ุชูุณุชุฎุฏู ูุชูููู ุงูุนูุงูุงุชุ ูุซู ุงูุชุญูู ููุง ุฅุฐุง ูุงูุช ูููุฉ ูุนููุฉ ุชุณุงูู ุฃู ุฃูุจุฑ ุฃู ุฃุตุบุฑ ูู ูููุฉ ุฃุฎุฑู."
        },
        {
            question: "ูุฃู ููุน ูู ุงูุจูุงูุงุช ููุซู ุฎุงุตูุฉ Booleanุ",
            options: ["ุนุฏุฏ ุตุญูุญ ููุท", "ูููุฉ ูุตูุฉ ููุท", "ุตุญูุญ ุฃู ุฎุทุฃ ููุท", "ุฑูู ุนุดุฑู ููุท"],
            answer: "ุตุญูุญ ุฃู ุฎุทุฃ ููุท",
            explanation: "ููุน ุงูุจูุงูุงุช Boolean ูุณุชุฎุฏู ูุชุฎุฒูู ุญุงูุชูู ููุท: true (ุตุญูุญ) ูfalse (ุฎุทุฃ)."
        },
        {
            question: "ุฃู ูู ุงูุนูุงูู ุงูุชุงููุฉ ุชุคุฏู ุฅูู ุชุญููู ุนูููุฉ ุงูุฌูุน ูู ูุตูุต VB.NETุ",
            options: ["*", "+", "/", "-"],
            answer: "+",
            explanation: "ุงูุนุงูู + ููุณุชุฎุฏู ููููุงู ุจุนูููุงุช ุงูุฌูุน ุณูุงุก ุนูู ุงูุฃุนุฏุงุฏ ุฃู ูุฏูุฌ ุงููุตูุต."
        },
        {
            question: "ูุง ูู ุงูุฎุตุงุฆุต ุงูุฃุณุงุณูุฉ ููุฎูุงุฑุฒููุฉ ุงูุฌูุฏุฉุ",
            options: ["ุชุญุชุงุฌ ุฅูู ูุฏุฎูุงุช", "ูุฌุจ ุฃู ุชูุชูู ุจุนุฏ ุนุฏุฏ ุบูุฑ ูุญุฏูุฏ ูู ุงูุฎุทูุงุช", "ูุฌุจ ุฃู ุชุนุทู ููุณ ุงููุฎุฑุฌุงุช ูููุฏุฎูุงุช ุงููุชุณุงููุฉ", "ุฌููุน ูุง ุณุจู"],
            answer: "ูุฌุจ ุฃู ุชุนุทู ููุณ ุงููุฎุฑุฌุงุช ูููุฏุฎูุงุช ุงููุชุณุงููุฉ",
            explanation: "ูุฌุจ ุฃู ุชุนุทู ุงูุฎูุงุฑุฒููุฉ ููุณ ุงููุฎุฑุฌุงุช ุฏุงุฆููุง ูููุณ ุงููุฏุฎูุงุชุ ููู ูุงุญุฏุฉ ูู ุงูุฎุตุงุฆุต ุงูุฃุณุงุณูุฉ ููุง."
        },
        {
            question: "ุฃู ูู ุงูุชูุซููุงุช ุงูุชุงููุฉ ูุณุชุฎุฏู ูุชูุซูู ุงูุฎูุงุฑุฒููุงุช ุจุดูู ูุตู ุบูุฑ ุฑุณููุ",
            options: ["Flowchart", "Pseudocode", "Data Structure", "Algorithm Design"],
            answer: "Pseudocode",
            explanation: "Pseudocode ูู ุชูุซูู ุดุจู ุจุฑูุฌู ูุณุชุฎุฏู ุงููุบุฉ ุงูุจุดุฑูุฉ ูุน ุจุนุถ ุงูููุงุนุฏุ ููุง ูุณูู ููู ุงูุญููู."
        },
        {
            question: "ููู ุชุชูุฑุฑ ุงูุฃูุงูุฑ ูู ุญููุฉ For Loopุ",
            options: ["ุชุชูุฑุฑ ุทุงููุง ุฃู ุงูุดุฑุท ุตุญูุญ", "ุชุชูุฑุฑ ูุนุฏุฏ ูุญุฏุฏ ูู ุงููุฑุงุช", "ุชุชูุฑุฑ ุจุฏูู ุฃู ูุงุนุฏุฉ", "ูุง ุชุชูุฑุฑ ููุงุฆูุงู"],
            answer: "ุชุชูุฑุฑ ูุนุฏุฏ ูุญุฏุฏ ูู ุงููุฑุงุช",
            explanation: "ุญููุฉ For ุชูุณุชุฎุฏู ูุชูุฑุงุฑ ุชูููุฐ ุฃูุฑ ูุนูู ูุนุฏุฏ ุซุงุจุช ูู ุงููุฑุงุชุ ููุง ูุฌุนููุง ูุนุงูุฉ ููุฃุฏุงุก ุงููููู."
        },
        {
            question: "ูุง ูู ููุนูุฉ ุงูุฏุงูุฉ ุงูุชู ูุง ุชูุฑุฌุน ูููุฉ ูู VB.NETุ",
            options: ["Returning Function", "Value Function", "Callback Function", "Void Function"],
            answer: "Void Function",
            explanation: "ุฏุงูุฉ ุจุฏูู ูููุฉ ุฅุฑุฌุงุน (Void Function) ุชููุฐ ูููุฉ ูุนููุฉ ูููููุง ูุง ุชูุฑุฌุน ุฃู ูููุฉุ ููุง ูุนูู ุฃููุง ุชุคุฏู ูุธููุฉ ุฏูู ุฃู ุชุนูุฏ ุจูุงูุงุช."
        },
        {
            question: "ูุง ูู ุชุนุฑูู ุงูุจุฑูุฌุฉุ",
            options: ["ูุชุงุจุฉ ููุงูุงุช", "ุฅุนุทุงุก ุฃูุงูุฑ ุตูุชูุฉ ููููุจููุชุฑ", "ูุชุงุจุฉ ุชุนูููุงุช ูููููุง ุงูููุจููุชุฑ", "ุงูุฑุณู ุนูู ุงูููุจููุชุฑ"],
            answer: "ูุชุงุจุฉ ุชุนูููุงุช ูููููุง ุงูููุจููุชุฑ",
            explanation: "ุงูุจุฑูุฌุฉ ูู ุนูููุฉ ูุชุงุจุฉ ุงูุชุนูููุงุช ุงูุชู ูุชูุฌุจ ุนูู ุงูููุจููุชุฑ ููููุง ูุชูููุฐูุง ูุฃุฏุงุก ููุงู ูุญุฏุฏุฉ."
        },
        {
            question: "ุฃู ูู ุงูุขุชู ููุนุฏ ูุบุฉ ุจุฑูุฌุฉ ุนุงููุฉ ุงููุณุชููุ",
            options: ["Machine Code", "Assembly", "Java", "Binary"],
            answer: "Java",
            explanation: "Java ูู ูุบุฉ ุจุฑูุฌุฉ ุนุงููุฉ ุงููุณุชูู ุชุชูุญ ูุชุงุจุฉ ุชุนูููุงุช ูุฑูุจุฉ ูู ุงููุบุฉ ุงูุทุจูุนูุฉ ููุง ูุณูู ููููุง ูุงุณุชุฎุฏุงููุง."
        },
        {
            question: "ุงูุฎุทูุฉ ุงูุฃููู ูู ุญู ุฃู ูุดููุฉ ุจุฑูุฌูุฉ ูู:",
            options: ["ุชุดุบูู ุงูุจุฑูุงูุฌ", "ุชุตููู ุงููุงุฌูุฉ", "ูุชุงุจุฉ ุงูููุฏ", "ุชุญุฏูุฏ ุงููุดููุฉ"],
            answer: "ุชุญุฏูุฏ ุงููุดููุฉ",
            explanation: "ุชุญุฏูุฏ ุงููุดููุฉ ูู ุฃูู ุฎุทูุฉ ูู ุนูููุฉ ุงูุจุฑูุฌุฉุ ูุฃููุง ุชุณุงุนุฏ ุนูู ููู ูุง ููุจุบู ุญูู ูู ุงูุจุฏุงูุฉ."
        },
        {
            question: "ุฃู ุฃุฏุงุฉ ุชูุณุชุฎุฏู ููุชุงุจุฉ ุงูุฃููุงุฏ ุงูุจุฑูุฌูุฉุ",
            options: ["ุงูุฑุณุงู", "Word", "Visual Studio Code", "Excel"],
            answer: "Visual Studio Code",
            explanation: "Visual Studio Code ูู ูุญุฑุฑ ุฃููุงุฏ ูุตูู ุฎุตูุตูุง ููุชุงุจุฉ ุงูุจุฑูุฌูุงุชุ ููู ุดุงุฆุน ุงูุงุณุชุฎุฏุงู ุจูู ุงููุจุฑูุฌูู."
        },
        {
            question: "ูู ุฎุฑุงุฆุท ุงูุชุฏููุ ุงูุฑูุฒ ๐ท ููุณุชุฎุฏู ูุชูุซูู:",
            options: ["ุจุฏุงูุฉ ุงูุจุฑูุงูุฌ", "ูุฑุงุฑ", "ุนูููุฉ ุญุณุงุจูุฉ", "ุฅุฎุฑุงุฌ ุจูุงูุงุช"],
            answer: "ูุฑุงุฑ",
            explanation: "ุงูุฑูุฒ ุงููุงุณู (๐ท) ููุณุชุฎุฏู ูุชูุซูู ููุทุฉ ุงุชุฎุงุฐ ูุฑุงุฑ (Decision) ูู ุฎุฑุงุฆุท ุงูุชุฏูู."
        },
        {
            question: "ุฃู ูู ุงูุขุชู ููุซู ุฏุงูุฉ ูุฅุฎุฑุงุฌ ุงููุต 'Hello World'ุ",
            options: ["echo 'Hello'", "write('Hello')", "print('Hello World')", "display('Hello')"],
            answer: "print('Hello World')",
            explanation: "ุฏุงูุฉ print('Hello World') ุชูุณุชุฎุฏู ูู ุงูุนุฏูุฏ ูู ูุบุงุช ุงูุจุฑูุฌุฉ ูุฅุฎุฑุงุฌ ุงููุตูุต ุฅูู ุงูุดุงุดุฉ."
        },
        {
            question: "ุฃู ูู ุงูุชุงูู ููุนุชุจุฑ ูู ูุบุงุช ุงูุจุฑูุฌุฉ ููุฎูุถุฉ ุงููุณุชููุ",
            options: ["Python", "Assembly", "JavaScript", "C++"],
            answer: "Assembly",
            explanation: "Assembly ุชูุนุชุจุฑ ูู ูุบุงุช ุงูุจุฑูุฌุฉ ููุฎูุถุฉ ุงููุณุชูู ูุฃููุง ุชุนูู ูุฑูุจุฉ ูู ูุบุฉ ุงูุขูุฉ."
        },
        {
            question: "ูู VB.NET ุฃู ููุง ููู ูุนุชุจุฑ ูุงุฆู (Object)ุ",
            options: ["Button", "String", "Loop", "Event"],
            answer: "Button",
            explanation: "Button ูู ุนูุตุฑ ูุงุฌูุฉ ูุณุชุฎุฏู ูู ุงูุจุฑูุฌุฉ ููุนุชุจุฑ ูุงุฆููุง ููุณุชุฎุฏู ูุชูุงุนู ุงููุณุชุฎุฏู ูุน ุงูุชุทุจูู."
        },
        {
            question: "ูุง ูุธููุฉ ุงูุฏุงูุฉ Val()ุ",
            options: ["ุชุญููู ูุต ุฅูู ุญุฑู", "ุชุญููู ูุต ุฅูู ุฑูู", "ุชุญููู ุฑูู ุฅูู ูุต", "ุนุฏ ุงูุญุฑูู"],
            answer: "ุชุญููู ูุต ุฅูู ุฑูู",
            explanation: "ุงูุฏุงูุฉ Val() ุชูุณุชุฎุฏู ูุชุญููู ุณูุณูุฉ ูุตูุฉ ุชูุซู ุนุฏุฏูุง ุฅูู ููุน ุงูุจูุงูุงุช ุงูุฑููู."
        },
        {
            question: "ูุงูุฐุฉ ุชุนุฑุถ ุงูุฃุฎุทุงุก ุฃุซูุงุก ุชูููุฐ ุงูุจุฑูุงูุฌ ูู:",
            options: ["Properties", "Form", "Code", "Error List"],
            answer: "Error List",
            explanation: "ูุงูุฐุฉ Error List ุชุนุฑุถ ุงูุฃุฎุทุงุก ุงูุชู ุชุญุฏุซ ุฃุซูุงุก ุชูููุฐ ุงูุจุฑูุงูุฌุ ููุง ูุณุงุนุฏ ุงููุจุฑูุฌ ุนูู ุชุตุญูุญูุง."
        },
        {
            question: "ุฃู ูู ุงูุชุงูู ุฑูุฒ ูุฅุฏุฎุงู ุฃู ุฅุฎุฑุงุฌ ุงูุจูุงูุงุช ูู ุฎุฑุงุฆุท ุงูุชุฏููุ",
            options: ["๐", "๐ท", "๐ฒ", "๐ฅ"],
            answer: "๐ฒ",
            explanation: "ุงูุดูู ุงููุชูุงุฒู ุงููุณุชุทููุงุช (๐ฒ) ููุณุชุฎุฏู ููุฅุดุงุฑุฉ ุฅูู ุฅุฏุฎุงู ุฃู ุฅุฎุฑุงุฌ ุงูุจูุงูุงุช ูู ุฎุฑุงุฆุท ุงูุชุฏูู."
        },
        {
            question: "ูู ุงูุฌูู ุงูุดุฑุทูุฉุ ุฃู ุตูุบุฉ ุชูุซู ุดุฑุทูุง ุจุณูุทูุงุ",
            options: ["Else If", "If Condition", "Switch", "For"],
            answer: "If Condition",
            explanation: "ุฌููุฉ If Condition (ุฃู ุจุจุณุงุทุฉ If) ูู ุงูุฃุณุงุณ ูุชุญุฏูุฏ ุงููุณุงุฑ ุงูุฐู ูุฌุจ ุงุชุจุงุนู ุจูุงุกู ุนูู ุดุฑุท ุจุณูุท."
        },
        {
            question: "ูุชูุฑุงุฑ ุชูููุฐ ููุฏ ุนุฏุฏ ูุนูู ูู ุงููุฑุงุช ูุณุชุฎุฏู:",
            options: ["If", "While", "For", "Function"],
            answer: "For",
            explanation: "ุญููุฉ For ุชูุณุชุฎุฏู ููุชูุฑุงุฑ ุนุฏุฏ ูุญุฏุฏ ูู ุงููุฑุงุชุ ููุง ูุฌุนููุง ููุงุณุจุฉ ูุฐูู."
        },
        {
            question: "ุฃู ููุน ูู ุงููุชุบูุฑุงุช ูุณุชุฎุฏู ูุชุฎุฒูู ูุตุ",
            options: ["Integer", "Boolean", "Double", "String"],
            answer: "String",
            explanation: "ูุชุบูุฑ ูู ููุน String ููุณุชุฎุฏู ูุชุฎุฒูู ุงููุตูุต."
        },
        {
            question: "ูู VB.NET ูุง ูุธููุฉ ุตูุฏูู ุงูุฃุฏูุงุช (Toolbox)ุ",
            options: ["ุชุนุฏูู ุงูููุฏ", "ุนุฑุถ ุงูุฃุฎุทุงุก", "ูุถุน ุนูุงุตุฑ ูุซู ุงูุฃุฒุฑุงุฑ ูุงููุตูุต", "ุชุบููุฑ ุฎุตุงุฆุต ุงููุดุฑูุน"],
            answer: "ูุถุน ุนูุงุตุฑ ูุซู ุงูุฃุฒุฑุงุฑ ูุงููุตูุต",
            explanation: "Toolbox ุชูุณุชุฎุฏู ูุชูููุฑ ุงูุนูุงุตุฑ ุงูุฃุณุงุณูุฉ ุงูุชู ูุญุชุงุฌูุง ุงููุจุฑูุฌ ูุซู ุงูุฃุฒุฑุงุฑ ููุฑุจุนุงุช ุงููุตูุต."
        },
        {
            question: "ูู ุฎูุงู Visual Basic .NET ูุชู ูุชุญ ูุดุฑูุน ุฌุฏูุฏ ูู:",
            options: ["Recent", "Create Project", "Save", "Format"],
            answer: "Create Project",
            explanation: "ุงูุงุฎุชูุงุฑ Create Project ููุณุชุฎุฏู ูุจุฏุก ูุดุฑูุน ุฌุฏูุฏ ูู ุจูุฆุฉ ุชุทููุฑ Visual Studio."
        },
        {
            question: "ูุฅุธูุงุฑ ุชุงุฑูุฎ ุงูููู ูุณุชุฎุฏู ุงูุฏุงูุฉ:",
            options: ["Val()", "DateString", "TimeString", "Len()"],
            answer: "DateString",
            explanation: "ุงูุฏุงูุฉ DateString ุชูุณุชุฎุฏู ูุฅุธูุงุฑ ุงูุชุงุฑูุฎ ุงูุญุงูู ูู VB.NET."
        },
        {
            question: "ุฃู ูู ุงูุชุงูู ููุนุชุจุฑ ูู ุงููุดุบูุงุช ุงูุญุณุงุจูุฉุ",
            options: ["+", "==", "!", "&&"],
            answer: "+",
            explanation: "ุงูุนุงูู ุงูุฌูุน (+) ููุณุชุฎุฏู ูู ุงูุนูููุงุช ุงูุญุณุงุจูุฉ ูุซู ุงูุฌูุน ุจูู ุงูุฃุนุฏุงุฏ."
        },
        {
            question: "ูู VB.NET ุฃู ูู ุงูุชุงูู ููุณุชุฎุฏู ูุฏูุฌ ุงููุตูุตุ",
            options: ["-", "&", "+", "="],
            answer: "&", // VB.NET uses & primarily for string concatenation. + also works but & is preferred.
            explanation: "ูุชู ุฏูุฌ ุงููุตูุต ุจุงุณุชุฎุฏุงู ุงูุนุงูู + ุฃู & ูู VB.NETุ ุญูุซ ููููุงู ุจุฏูุฌ ุงูููู ุงููุตูุฉ ูุนูุง. ุงูุนุงูู & ูู ุงูุฃูุซุฑ ุดููุนูุง ููุถูุญูุง ูุฏูุฌ ุงููุตูุต ุชุญุฏูุฏูุง."
        },
        {
            question: "ูุง ููุน ุงูุญููุฉ ุงูุชู ุชูุณุชุฎุฏู ุนูุฏูุง ูุง ูุนุฑู ุนุฏุฏ ูุฑุงุช ุงูุชูุฑุงุฑ ูุณุจููุงุ",
            options: ["For", "Do Until", "While", "Next"],
            answer: "While",
            explanation: "ุญููุฉ While ุชูุณุชุฎุฏู ุนูุฏูุง ูุง ูููู ุชุญุฏูุฏ ุนุฏุฏ ุงูุชูุฑุงุฑุงุช ูุณุจููุงุ ุญูุซ ุชุณุชูุฑ ุทุงููุง ุฃู ุงูุดุฑุท ุตุญูุญ."
        },
        {
            question: "ุฃู ูู ุงูุฎูุงุฑุงุช ุงูุชุงููุฉ ููุซู ูููุฉ ูู ุงูููุน Listุ",
            options: ["(username): 'mohamed'", "[mohamed]", "{mohamed}", "(mohamed)"],
            answer: "[mohamed]",
            explanation: "ุงูุดูู [mohamed] ููุซู ูุงุฆูุฉ (List) ุชุญุชูู ุนูู ุนูุตุฑ ูุงุญุฏ ููู 'mohamed'. ุงูุฎูุงุฑุงุช ุงูุฃุฎุฑู ุบูุฑ ุตุญูุญุฉ ูุฃููุง ููุณุช ูู ุตูุบุฉ ูุงุฆูุฉ ุตุญูุญุฉ."
        },
        {
            question: "ุญุฏุฏ ุงูููู ุงูุชู ุชุนุฏ ูู ุงูููุน double ูู ูุบุฉ Dart. (ุงุฎุชุฑ ุฌููุน ุงูุฅุฌุงุจุงุช ุงูุตุญูุญุฉ)",
            options: ["5", "'5.5'", "5.6"],
            answer: ["5.6"], // Note: '5.5' is a String, not a double directly.
            explanation: "ุงููููุฉ 5.6 ุชุนุชุจุฑ ูู ุงูููุน double. '5.5' ูู ูููุฉ ูุตูุฉ ูููุณุช ุฑูููุฉ ูุจุงุดุฑุฉ."
        },
        {
            question: "ุชุดูู ุงูููู ุงูููุทููุฉ:",
            options: ["ุงูููู ุงูููุฌุจุฉ ูุงูุณุงูุจุฉ", "ุงููุตูุต ุงูุทูููุฉ ูุงููุตูุฑุฉ", "ุงูููุงุฆู ูุงููุตูููุงุช", "ุตุญูุญ ูุฎุทุฃ"],
            answer: "ุตุญูุญ ูุฎุทุฃ",
            explanation: "ุงูููู ุงูููุทููุฉ ุชุนูู ุงูููู ุงูุชู ุชุดูุฑ ุฅูู ุงูุญุงูุฉ ุงูุตุญูุญุฉ ุฃู ุงูุฎุงุทุฆุฉ (True/False)."
        },
        {
            question: "ุชูุณุชุฎุฏู ุงููููุฉ ุงูููุชุงุญูุฉ .... ููุฅุนูุงู ุนู ุงููุชุบูุฑุงุช ูู ูุบุฉ Visual Basic.",
            options: ["Constant", "Dim", "Var", "Static"],
            answer: "Dim",
            explanation: "ุงููููุฉ ุงูููุชุงุญูุฉ Dim ุชูุณุชุฎุฏู ูู ูุบุฉ Visual Basic ูุฅุนูุงู ุงููุชุบูุฑุงุช."
        },
        {
            question: "ูุณุชูุฏู ููููู ุงููุดููุงุช ุงูุชุนุงูู ูุน ุงููููู ุงููุงุฏู ... ูู ุฌูุงุฒ ุงูุญุงุณุจ.",
            options: ["ุงููุนุงูุฌ (Processor)", "ุงูุฐุงูุฑุฉ (RAM)", "ูุญุฏุงุช ุงูุฅุฏุฎุงู (Input Units)", "ูุญุฏุงุช ุงูุฅุฎุฑุงุฌ (Output Units)"],
            answer: "ุฌููุน ูุง ุณุจู", // Modified to be single choice as per quiz structure
            explanation: "ุฌููุน ุงูุฎูุงุฑุงุช ุชุดูุฑ ุฅูู ููููุงุช ูุงุฏูุฉ ูู ุงูุญุงุณูุจ (ุงููุนุงูุฌุ ุงูุฐุงูุฑุฉุ ูุญุฏุงุช ุงูุฅุฏุฎุงูุ ููุญุฏุงุช ุงูุฅุฎุฑุงุฌ) ูุงูุชู ูููู ุฃู ุชูุชุฌ ุนููุง ูุดููุงุช ุจุฑูุฌูุฉ."
        },
        {
            question: "ุญุฏุฏ ุงูุฏูุงู ุงูุชู ูุฌุจ ุงุณุชุฎุฏุงู ุงููููุฉ ุงูููุชุงุญูุฉ ูููุง. (ุงุฎุชุฑ ุฌููุน ุงูุฅุฌุงุจุงุช ุงูุตุญูุญุฉ)",
            options: ["int calc", "calc"],
            answer: ["int calc", "calc"], // Assuming both represent function declarations, one with explicit return type.
            explanation: "ุชุณุชุฎุฏู ุงููููุฉ ุงูููุชุงุญูุฉ (ูุซู `function` ุฃู `void` ุฃู ููุน ุงูุฅุฑุฌุงุน) ูู ุชุนุฑูู ุงูุฏูุงูุ ุณูุงุก ุจุชุญุฏูุฏ ููุน ุงูุฅุฑุฌุงุน ุฃู ุจุฏููู (ูู ุจุนุถ ุงููุบุงุช)."
        },
        {
            question: "ุชุนุชุจุฑ ุงูุนูุงูุฉ ..... ูู ูุดููุงุช ูุบุฉ Dart ุงููุณุคููุฉ ุนู ุฅุฌุฑุงุก ุนูููุฉ ุจุงูู ุงููุณูุฉ.",
            options: ["10", "%", "1000"],
            answer: "%",
            explanation: "ุนูุงูุฉ % ุชูุณุชุฎุฏู ููุญุตูู ุนูู ุจุงูู ุงููุณูุฉ (Modulo operator)."
        },
        {
            question: "ุชุนุชุจุฑ .... ูู ุงููููุงุช ุงูููุชุงุญูุฉ ุงููุณุชุฎุฏูุฉ ูู ุฅูุดุงุก ุฌููุฉ ุชูุฑุงุฑูุฉ ูู ูุบุฉ Dart.",
            options: ["While", "Key", "For", "Condition"],
            answer: ["While", "For"],
            explanation: "ุชูุณุชุฎุฏู ูู ูู While ู For ูุฅูุดุงุก ุญููุงุช ุชูุฑุงุฑูุฉ (Loops)."
        },
        {
            question: "ุชุนุชุจุฑ ..... ูู ุงููููุงุช ุงูููุชุงุญูุฉ ุงููุณุชุฎุฏูุฉ ูู ุฅูุดุงุก ุฌููุฉ ุดุฑุทูุฉ ูู ูุบุฉ Dart.",
            options: ["While", "If", "For", "Condition"],
            answer: "If",
            explanation: "ุงููููุฉ ุงูููุชุงุญูุฉ `if` ุชูุณุชุฎุฏู ูุฅูุดุงุก ุฌูู ุดุฑุทูุฉ."
        },
        {
            question: "ูุณุชุฎุฏู ุงูุชุบููุฑ ....... ููุฅุนูุงู ุนู ูุชุบูุฑ ูุดูู ุฎุฑูุทุฉ ูู ุงูุจูุงูุงุช ุงููุฎุชููุฉ.",
            options: ["String", "List", "Map<String, dynamic>", "Map"],
            answer: "Map<String, dynamic>",
            explanation: "ููุณุชุฎุฏู Map<String, dynamic> ููุฅุนูุงู ุนู ุฎุฑูุทุฉ (Map) ุชุชุถูู ููุงุชูุญ ูู ููุน String ูููู ูู ููุน dynamicุ ููู ุงูููุน ุงูุฃูุซุฑ ุชุญุฏูุฏูุง ูุฎุฑูุทุฉ ุจูุงูุงุช ูุชููุนุฉ."
        },
        {
            question: "ูู ูู ุงูููุงุนุฏ ุงูุฃุณุงุณูุฉ ูู ุงูุจุฑูุฌุฉ ุชุดูุฑ ุฅูู ุงุณุชุฎุฏุงู ุฃุฏูุงุช ููุชุญูู ูุงุชุฎุงุฐ ุงููุฑุงุฑุงุช ุฏุงุฎู ุงูุจุฑูุงูุฌ.",
            options: ["ุฃููุงุน ุงูุจูุงูุงุช (Data Types)", "ุงูุฌูู ุงูุดุฑุทูุฉ (Conditional Statements)", "ุงููุนุงููุงุช (Operators)"],
            answer: "ุงูุฌูู ุงูุดุฑุทูุฉ (Conditional Statements)",
            explanation: "ุชูุณุชุฎุฏู ุงูุฌูู ุงูุดุฑุทูุฉ ููุชุญูู ูู ุชุฏูู ุงูุจุฑูุงูุฌ ูุงุชุฎุงุฐ ุงููุฑุงุฑุงุช."
        },
        {
            question: "ูุณุชุฎุฏู ุงูุดูู ....... ููุชุนุจูุฑ ุนู ุงููุฏุฎูุงุช ูุงููุฎุฑุฌุงุช ูู ุฎุฑุงุฆุท ุงูุชุฏูู.",
            options: ["ุงููุณุชุทูู (Rectangle)", "ุงูุจูุถุงูู (Oval)", "ุงููุนูู (Rhombus)"],
            answer: "ุงููุชูุงุฒู ุงูุฃุถูุงุน (Parallelogram)", // Corrected to match standard flowchart symbols. Oval is for start/end.
            explanation: "ุงูุดูู ุงููุชูุงุฒู ุงููุณุชุทููุงุช ููุณุชุฎุฏู ูุชูุซูู ุงููุฏุฎูุงุช ูุงููุฎุฑุฌุงุช ูู ุฎุฑุงุฆุท ุงูุชุฏููุ ุจูููุง ุงูุจูุถุงูู ูู ููุจุฏุงูุฉ/ุงูููุงูุฉ."
        },
        {
            question: "ุญุฏุฏ ุงูุนูููุฉ ุงููุณุคููุฉ ุนู ููุทุฉ ุงูููุงูุฉ ูุฌููุฉ ุงูุชูุฑุงุฑ ูู ูุบุฉ Dart.",
            options: ["1 = 10", "10", "1 = 10"], // options are confusing, assume it's about loop condition
            answer: "ุงูุดุฑุท ุงูุฐู ูุฌุนู ุงูุญููุฉ ุชุชููู", // Rephrased for clarity
            explanation: "ููุทุฉ ุงูููุงูุฉ ูุฌููุฉ ุงูุชูุฑุงุฑ ูู ูุบุฉ Dart (ูุซู For ุฃู While) ูุชู ุชุญุฏูุฏูุง ุจูุงุณุทุฉ ุงูุดุฑุท ุงูุฐู ูุฌุนู ุงูุญููุฉ ุชุชููู ุนู ุงูุชูููุฐ."
        },
        {
            question: "ุชุณุชุฎุฏู ุงูุฃููุงุณ ...... ูุชุญุฑูุฑ ุงูุจูุงูุงุช ุฏุงุฎู ุงูุฏุงูุฉ.",
            options: ["[]", "()", "{}"],
            answer: "()",
            explanation: "ุชุณุชุฎุฏู ุงูุฃููุงุณ () ูุชุญุฏูุฏ ุงูุจูุงูุงุช ุงูุชู ูุชู ุชูุฑูุฑูุง ุฅูู ุงูุฏุงูุฉ (ุงูุจุงุฑุงูุชุฑุงุช/ุงููุณุงุฆุท)."
        },
        {
            question: "ุงููุญุฏุฏ ูู ุงูุฃุฏูุงุช ุงูุจุฑูุฌูุฉ ุงูุชู ุชููู ุงููุจุฑูุฌ ูู ุชูุธูู ุงูุจุฑูุงูุฌ ูู ูุธุงุฆู ูููุตูุฉ.",
            options: ["ูุฌููุนุฉ ุชุทููุฑ ุงูุจุฑูุฌูุงุช (SDK)", "ุงููุชุบูุฑุงุช ูุงูุซูุงุจุช", "ุงูุฌูู ุงูุดุฑุทูุฉ ูุงูุชูุฑุงุฑูุฉ", "ุงูุฏูุงู (Functions)"],
            answer: "ุงูุฏูุงู (Functions)",
            explanation: "ุชูุณุงุนุฏ ุงูุฏูุงู ูู ุชูุธูู ุงูููุฏ ุฅูู ุฃูุณุงู ูููู ุฅุนุงุฏุฉ ุงุณุชุฎุฏุงููุงุ ููุง ูุฌุนู ุงูุจุฑูุงูุฌ ุฃูุซุฑ ุชูุธูููุง."
        },
        {
            question: "ุชุณุชุฎุฏู ุงููููุฉ ุงูููุชุงุญูุฉ .. ููุฅุนูุงู ุนู ุงูุซูุงุจุช ูู ูุบุฉ Dart.",
            options: ["Constant", "Const", "Var"],
            answer: "Const",
            explanation: "const ุชูุณุชุฎุฏู ูุชุญุฏูุฏ ุงูุซูุงุจุช ูู Dart ุงูุชู ุชุนุฑู ููุช ุงูุชุฑุฌูุฉ."
        },
        {
            question: "ูุง ูู ุชุฑุชูุจ ุงูุฃุฌุฒุงุก ุงูุฑุฆูุณูุฉ ููุญููุฉ ุงูุชูุฑุงุฑูุฉ ูู ุฏุงุฑุชุ",
            options: ["ุชุนุฑูู ุงูุนุฏุงุฏ - ุงูุดุฑุท - ุงูุฎุทูุฉ", "ุชุนุฑูู ุงูุนุฏุงุฏ - ุงูุฎุทูุฉ - ุงูุดุฑุท", "ุงูุฎุทูุฉ - ุชุนุฑูู ุงูุนุฏุงุฏ - ุงูุดุฑุท", "ุงูุดุฑุท - ุงูุฎุทูุฉ - ุชุนุฑูู ุงูุนุฏุงุฏ"],
            answer: "ุชุนุฑูู ุงูุนุฏุงุฏ - ุงูุดุฑุท - ุงูุฎุทูุฉ",
            explanation: "ุงูุชุฑุชูุจ ุงูุตุญูุญ ูุฃุฌุฒุงุก ุญููุฉ For (For Loop) ูู: ุชููุฆุฉ ุงูุนุฏุงุฏ (ุชุนุฑูู ุงูุนุฏุงุฏ)ุ ุงูุดุฑุทุ ูุงูุฎุทูุฉ (ุงูุฒูุงุฏุฉ/ุงูููุตุงู)."
        },
        {
            question: "ูุชูุฌุฉ ุงูุนูููุฉ ุงูุชุงููุฉ: 5 - 15",
            options: ["10", "-10", "True"],
            answer: "-10",
            explanation: "ุงููุงุชุฌ ูู 5 - 15 = -10."
        },
        {
            question: "ุชุณุชุฎุฏู ุงููููุฉ ุงููุงุฑุซุฉ ููุชุนุจูุฑ ุนู:",
            options: ["ุงููููุฉ ุงููุงุฑุบุฉ (Empty Value)", "ุงูุฑูู ุตูุฑ (The number Zero)", "ูููุฉ ุบูุฑ ูุนุฑููุฉ (An Unknown Value)"],
            answer: "ูููุฉ ุบูุฑ ูุนุฑููุฉ (An Unknown Value)", // Null or undefined implies unknown/absence
            explanation: "ูู ุณูุงู ุงูุจุฑูุฌุฉุ ุงููููุฉ ุงููุงุฑุซุฉ (ุฃู Null/Undefined) ุบุงูุจูุง ูุง ุชุนุจุฑ ุนู ูููุฉ ุบูุฑ ููุฌูุฏุฉ ุฃู ุบูุฑ ูุนุฑููุฉ."
        },
        {
            question: "ูุนุชุจุฑ ..... ูู ุงููุณุคูู ุนู ุชุฎุฒูู ุงูููู ุงูุชู ูุง ุชุชุบูุฑ ุฃุซูุงุก ุชุดุบูู ุงูุจุฑูุงูุฌ.",
            options: ["ุงููุชุบูุฑุงุช (Variables)", "ุงูุซูุงุจุช (Constants)", "ุงูุฐุงูุฑุฉ ุงููุคูุชุฉ (Temporary Memory)"],
            answer: "ุงูุซูุงุจุช (Constants)",
            explanation: "ุงูุซูุงุจุช ุชูุณุชุฎุฏู ูุชุฎุฒูู ุงูููู ุงูุซุงุจุชุฉ ุงูุชู ูุง ุชุชุบูุฑ ุฃุซูุงุก ุชุดุบูู ุงูุจุฑูุงูุฌ."
        },
        {
            question: "ุชุณุชุฎุฏู ุงููููุฉ ุงูููุชุงุญูุฉ ...... ูุชุนููู ุงููุฎุฑุฌ ุงููุงุชุฌ ูู ุงูุฏุงูุฉ.",
            options: ["Output", "Print", "Return"],
            answer: "Return",
            explanation: "ุชุณุชุฎุฏู return ูุฅุฑุฌุงุน ูููุฉ ูู ุงูุฏุงูุฉ ุฅูู ุงูุฌุฒุก ุงูุฐู ุงุณุชุฏุนุงูุง."
        },
        {
            question: "ุนุฏุฏ ุงูููู ุงูุชู ุชุนุฏ ูู ุงูููุน ูู Dart.", // Question is incomplete, assuming "int" type.
            options: ["5", "3", "30", "50"],
            answer: ["5", "3", "30", "50"], // All are integers
            explanation: "ุฌููุน ุงูุฃุฑูุงู ุงูุตุญูุญุฉ ูุซู 5ุ 3ุ 30ุ 50 ุชุนุชุจุฑ ูู ุงูููุน int (ุนุฏุฏ ุตุญูุญ) ูู Dart."
        },
        {
            question: "ุนุฏุฏ ุฃููุงุน ุงูุจูุงูุงุช ุงููุฑูุจุฉ ุงููุฐููุฑุฉ ูู ุงูุจุฏุงุฆู. (ุงุฎุชุฑ ุฌููุน ุงูุฅุฌุงุจุงุช ุงูุตุญูุญุฉ)", // Assuming the options refer to complex data types
            options: ["Display Value", "Dynamic", "Map"],
            answer: ["Dynamic", "Map"], // List should also be here, but not an option. Dynamic and Map are complex.
            explanation: "ูู ูู Dynamic (ูุฃูู ูููู ุฃู ูุชุบูุฑ ููุนู) ู Map (ูุฃูู ูููู ุจูุงูุงุช ูุนูุฏ) ููุซูุงู ุฃููุงุน ุจูุงูุงุช ูุฑูุจุฉ ูู Dart."
        },
        {
            question: "ูุณุชูุฏู ููููู ... ุงูุชุนุงูู ูุน ุงูุฐุงูุฑุฉ ูู ุฌูุงุฒ ุงูุญุงุณุจ.",
            options: ["ุงููุนุงูุฌุงุช (Processors)", "ุงูุฏูุงู (Functions)", "ุฃููุงุน ุงูุจูุงูุงุช (Data Types)"],
            answer: "ุงูุฏูุงู (Functions)", // Functions often manage memory allocation/deallocation implicitly or explicitly
            explanation: "ุชูุณุชุฎุฏู ุงูุฏูุงู ูู ุฅุฏุงุฑุฉ ุงูุฐุงูุฑุฉ ุจุดูู ูุนูุงูุ ุฎุงุตุฉ ุนูุฏ ุชุฎุตูุต ูุชุญุฑูุฑ ุงูููุงุฑุฏ."
        },
        {
            question: "ุชุณุชุฎุฏู ุงูุฌููุฉ ..... ูุฅุถุงูุฉ ุนุฏุฉ ุดุฑูุท ูู ุฌููุฉ ุดุฑุทูุฉ.",
            options: ["If", "Else", "Switch"],
            answer: "If",
            explanation: "ุชุณุชุฎุฏู `if` (ูุน `else if`) ููุชุญูู ูู ุงูุดุฑูุท ุงููุชุนุฏุฏุฉ ูู ุฌููุฉ ุดุฑุทูุฉ."
        },
        {
            question: "ุฃู ูู ุงูุฎูุงุฑุงุช ุงูุชุงููุฉ ููุซู ุจูุงู ูู ุงูููุน ุฎุฑุงุฆุท Mapุ",
            options: ["username: 'mohamed'", "'mohamed'", "mohamed"],
            answer: "username: 'mohamed'",
            explanation: "ููุซู ุจูุงู ุฎุฑูุทุฉ ุญูุซ `username` ูู ุงูููุชุงุญ ู`'mohamed'` ูู ุงููููุฉ."
        },
        {
            question: "ูุณุชุฎุฏู ุงูุดูู ...... ููุชุนุจูุฑ ุนู ุงูุนูููุงุช ูู ุฎุฑุงุฆุท ุงูุชุฏูู.",
            options: ["ุงููุณุชุทูู (Rectangle)", "ุงูุจูุถุงูู (Oval)", "ุงููุนูู (Rhombus)"],
            answer: "ุงููุณุชุทูู (Rectangle)",
            explanation: "ููุณุชุฎุฏู ุงูุดูู ุงููุณุชุทูู ูุชูุซูู ุงูุนูููุงุช ุงูุญุณุงุจูุฉ ุฃู ุงููุนุงูุฌุฉ ูู ุฎุฑุงุฆุท ุงูุชุฏูู."
        },
        {
            question: "ุชุนุชุจุฑ ุงูุนูุงูุฉ .... ูู ูุดููุงุช ูุบุฉ Dart ุงููุณุคูุฉ ุนู ุฅุฌุฑุงุก ุนูููุฉ ุฏูุฌ ุงููุตูุต.",
            options: ["&", "+", "*"],
            answer: "+",
            explanation: "ุชุณุชุฎุฏู ุนูุงูุฉ `+` ูุฏูุฌ ุงููุตูุต (String Concatenation) ูู ูุบุฉ Dart."
        },
        {
            question: "ุงูุชุบููุฑ ...... ูุณุชุฎุฏู ูุฒูุงุฏุฉ ุงูุฑูู 5 ุจููุฏุงุฑ 1.",
            options: ["++5", "+5", "1 + 5"],
            answer: "++5",
            explanation: "`++5` (ุฃู `5++`) ุชูุณุชุฎุฏู ูุฒูุงุฏุฉ ุงูุฑูู ุจููุฏุงุฑ 1 (Increment operator)."
        },
        {
            question: "ุงูุฅุนูุงู ุนู ูุชุบูุฑ ูุดูู ูุงุฆูุฉ ูู ุงููุตูุต ูุณุชุฎุฏู ุงูุชุบูุฑ ...... ููุฅุนูุงู.",
            options: ["List<String>", "Map", "Array<String>"],
            answer: "List<String>",
            explanation: "ููุณุชุฎุฏู `List<String>` ููุฅุนูุงู ุนู ูุงุฆูุฉ (List) ุชุญุชูู ุนูู ุนูุงุตุฑ ูู ููุน String (ูุตูุต)."
        }
    ];

    let currentQuestionIndex = 0;
    let score = 0;
    let userAnswers = []; // To store user's choices and correct answers for review

    const startQuizBtn = document.getElementById('startQuizBtn');
    const quizContainer = document.getElementById('quiz-container');
    const questionCard = document.getElementById('question-card');
    const currentQuestionElem = document.getElementById('currentQuestion');
    const quizOptionsElem = document.getElementById('quizOptions');
    const feedbackMessageElem = document.getElementById('feedbackMessage');
    const explanationTextElem = document.getElementById('explanationText');
    const progressBar = document.getElementById('progressBar');
    const nextQuestionBtn = document.getElementById('nextQuestionBtn');
    const quizResultsElem = document.getElementById('quiz-results');
    const scoreDisplay = document.getElementById('scoreDisplay');
    const totalQuestionsDisplay = document.getElementById('totalQuestionsDisplay');
    const reviewAnswersElem = document.getElementById('reviewAnswers');
    const retakeQuizBtn = document.getElementById('retakeQuizBtn');

    function startQuiz() {
        startQuizBtn.style.display = 'none';
        quizContainer.style.display = 'block';
        currentQuestionIndex = 0;
        score = 0;
        userAnswers = [];
        quizResultsElem.style.display = 'none'; // Hide results if visible
        questionCard.style.display = 'block'; // Ensure question card is visible
        loadQuestion();
    }

    function loadQuestion() {
        if (currentQuestionIndex < questions.length) {
            const q = questions[currentQuestionIndex];
            currentQuestionElem.textContent = q.question;
            quizOptionsElem.innerHTML = ''; // Clear previous options
            feedbackMessageElem.textContent = ''; // Clear previous feedback
            explanationTextElem.style.display = 'none'; // Hide explanation

            // Enable next button only after an answer is selected
            nextQuestionBtn.disabled = true;

            q.options.forEach(option => {
                const li = document.createElement('li');
                li.textContent = option;
                li.addEventListener('click', () => selectAnswer(li, option, q.answer, q.explanation));
                quizOptionsElem.appendChild(li);
            });
            updateProgressBar();
        } else {
            showResults();
        }
    }

    function selectAnswer(selectedLi, selectedOption, correctAnswer, explanation) {
        // Disable all options after selection
        Array.from(quizOptionsElem.children).forEach(li => {
            li.style.pointerEvents = 'none'; // Disable click
            li.classList.remove('correct', 'incorrect'); // Clear previous highlights
        });

        const isCorrect = Array.isArray(correctAnswer) ? correctAnswer.includes(selectedOption) : selectedOption === correctAnswer;
        
        let feedbackMessage = '';
        if (isCorrect) {
            selectedLi.classList.add('correct');
            feedbackMessage = 'ุฅุฌุงุจุฉ ุตุญูุญุฉ!';
            score++;
        } else {
            selectedLi.classList.add('incorrect');
            feedbackMessage = 'ุฅุฌุงุจุฉ ุฎุงุทุฆุฉ.';
            // Highlight the correct answer if it's a single correct answer
            if (!Array.isArray(correctAnswer)) {
                Array.from(quizOptionsElem.children).forEach(li => {
                    if (li.textContent === correctAnswer) {
                        li.classList.add('correct');
                    }
                });
            } else { // Handle multiple correct answers highlighting
                Array.from(quizOptionsElem.children).forEach(li => {
                    if (correctAnswer.includes(li.textContent)) {
                        li.classList.add('correct');
                    }
                });
            }
        }
        
        feedbackMessageElem.textContent = feedbackMessage;
        explanationTextElem.textContent = `ุงูุชูุณูุฑ: ${explanation}`;
        explanationTextElem.style.display = 'block';

        // Store the user's answer for review
        userAnswers.push({
            question: questions[currentQuestionIndex].question,
            selected: selectedOption,
            correct: correctAnswer,
            isCorrect: isCorrect,
            explanation: explanation
        });

        // Enable next button
        nextQuestionBtn.disabled = false;
    }

    function nextQuestion() {
        currentQuestionIndex++;
        loadQuestion();
    }

    function updateProgressBar() {
        const progress = ((currentQuestionIndex) / questions.length) * 100;
        progressBar.style.width = `${progress}%`;
    }

    function showResults() {
        quizContainer.style.display = 'none';
        questionCard.style.display = 'none'; // Hide current question card
        quizResultsElem.style.display = 'block';

        scoreDisplay.textContent = score;
        totalQuestionsDisplay.textContent = questions.length;
        reviewAnswersElem.innerHTML = '<h3>ูุฑุงุฌุนุฉ ุงูุฅุฌุงุจุงุช:</h3>'; // Reset review section

        userAnswers.forEach((item, index) => {
            const reviewItem = document.createElement('div');
            reviewItem.classList.add('review-item');
            
            const qText = document.createElement('p');
            qText.classList.add('review-question');
            qText.textContent = `${index + 1}. ${item.question}`;
            reviewItem.appendChild(qText);

            const userAnswerText = document.createElement('p');
            userAnswerText.classList.add('review-user-answer');
            userAnswerText.textContent = `ุฅุฌุงุจุชู: ${item.selected}`;
            userAnswerText.style.color = item.isCorrect ? '#4CAF50' : '#f44336'; // Green for correct, red for incorrect
            reviewItem.appendChild(userAnswerText);

            const correctAnswerText = document.createElement('p');
            correctAnswerText.classList.add('review-correct-answer');
            correctAnswerText.textContent = `ุงูุฅุฌุงุจุฉ ุงูุตุญูุญุฉ: ${Array.isArray(item.correct) ? item.correct.join(' ุฃู ') : item.correct}`;
            reviewItem.appendChild(correctAnswerText);

            const explanationText = document.createElement('p');
            explanationText.classList.add('review-explanation');
            explanationText.textContent = `ุงูุชูุณูุฑ: ${item.explanation}`;
            reviewItem.appendChild(explanationText);

            reviewAnswersElem.appendChild(reviewItem);
        });
    }

    function retakeQuiz() {
        startQuiz(); // Simply restart the quiz
    }

    // Event Listeners
    startQuizBtn.addEventListener('click', startQuiz);
    nextQuestionBtn.addEventListener('click', nextQuestion);
    retakeQuizBtn.addEventListener('click', retakeQuiz);

    // Initial state: hide quiz and results, show start button
    quizContainer.style.display = 'none';
    quizResultsElem.style.display = 'none';
    questionCard.style.display = 'none'; // Hide the question card until quiz starts

});